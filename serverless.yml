# service name
service: wordbose-test-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  environment:
    # Convert to reference to resources defined in Resources block
    tableName: transcripts-test
    usersTableName: test-wordbose-users
    uploadsBucketName: wordbose-file-upload-test
    destBucketName: wordbose-destination-test
    stripeSecret: ${env:STRIPE_SECRET_KEY}
  
  # iamRoleStatements = iamRole for lambda functions
  iamRoleStatements:
    # Permissions for CRUD lambda functions on any table
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"
    # Permissions for sendToTranscribe
    # Permission to use transcribe
    - Effect: Allow
      Action:
        - transcribe:*
      Resource: "*"
    # Permission to access transcript destination bucket and write to data file
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::wordbose-destination-test/*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::wordbose-file-upload-test/*"
    # Permission to allow for email alert upon transcript completion
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"

functions:
  create:
    handler: create.handler
    events:
      - http:
          path: transcript
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.handler
    events:
      - http:
          path: transcript/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list.handler
    events:
      - http:
          path: transcript
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.handler
    events:
      - http:
          path: transcript/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.handler
    events:
      - http:
          path: transcript/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  newUser:
    handler: newUser.handler
    events:
      - http:
          path: newUser
          method: post
          cors: true
          authorizer: aws_iam
  billing:
    handler: billing.handler
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

  # S3 event trigger must be configured manually from upload bucket
  # (only on uploads to /private/)
  sendToTranscribe:
    handler: sendToTranscribe.handler

  # S3 event trigger must be configured manually from destination bucket
  # Can be set to only .json files but since transcribe is only output this is redundant
  onTranscribeDump:
    handler: onTranscribeDump.handler

  ## With manually configured events, events must be reconfigured if ARN of
  ## Lambda Function changes when redeploying the stack (function is renamed etc.)

# Create resources with CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}