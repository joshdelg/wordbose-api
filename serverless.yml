# service name
service: wordbose-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Stage based on argument passed in when running serverless commands
  # Otherwise, default to provider stage
  stage: ${opt:stage, self:provider.stage}

  # Set table names for local testing
  tableName: ${self:custom.stage}-transcripts
  usersTableName: ${self:custom.stage}-users

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  environment:
    # Convert to reference to resources defined in Resources block
    tableName: ${self:custom.tableName}
    usersTableName: ${self:custom.usersTableName}

    # References to auto-generated names of buckets. Does not print properly locally but does work!
    uploadsBucketName: !Ref UploadsBucket
    destBucketName: !Ref DestinationBucket
    stripeSecret: ${env:STRIPE_SECRET_KEY}

  # iamRoleStatements = iamRole for lambda functions
  iamRoleStatements:
    # Permissions for CRUD lambda functions on tables
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ TranscriptsTable, Arn ]
        - "Fn::GetAtt": [ UsersTable, Arn ]

    # Permissions for sendToTranscribe and onTranscribeDump
    # Permission to use transcribe
    - Effect: Allow
      Action:
        - transcribe:*
      Resource: "*"

    # Permission to access transcript destination bucket
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "DestinationBucket"
            - "/*"

    # Permission to access transcript uploads bucket
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:DeleteObject
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "UploadsBucket"
            - "/*"

    # Permission to allow for email alert upon transcript completion
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"

functions:
  create:
    handler: create.handler
    events:
      - http:
          path: transcript
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.handler
    events:
      - http:
          path: transcript/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list.handler
    events:
      - http:
          path: transcript
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.handler
    events:
      - http:
          path: transcript/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.handler
    events:
      - http:
          path: transcript/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  newUser:
    handler: newUser.handler
    events:
      - http:
          path: newUser
          method: post
          cors: true
          authorizer: aws_iam
  billing:
    handler: billing.handler
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam
  createSetupIntent:
    handler: createSetupIntent.handler
    events:
      - http:
          path: createSetupIntent
          method: post
          cors: true
          authorizer: aws_iam
  attachPaymentMethod:
    handler: attachPaymentMethod.handler
    events:
      - http:
          path: attachPaymentMethod
          method: post
          cors: true
          authorizer: aws_iam
  listPaymentMethods:
    handler: listPaymentMethods.handler
    events:
      - http:
          path: listPaymentMethods
          method: post
          cors: true
          authorizer: aws_iam

  # S3 event trigger must be configured manually from upload bucket
  # (only on uploads to /private/)
  sendToTranscribe:
    handler: sendToTranscribe.handler

  # S3 event trigger must be configured manually from destination bucket
  # Can be set to only .json files but since transcribe is only output this is redundant
  onTranscribeDump:
    handler: onTranscribeDump.handler

  ## With manually configured events, events must be reconfigured if ARN of
  ## Lambda Function changes when redeploying the stack (function is renamed etc.)

# Create resources with CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB Tables
  - ${file(resources/dynamodb-tables.yml)}
  # S3 Buckets
  - ${file(resources/s3-buckets.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}